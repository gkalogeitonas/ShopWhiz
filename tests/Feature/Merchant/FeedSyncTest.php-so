<?php

use App\Models\User;
use App\Models\Tenant;
use App\Models\Feed;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;

uses(RefreshDatabase::class);

test('authenticated user can filter feeds by tenant', function () {
    $user = User::factory()->create();

    // Create tenants for this user
    $tenant1 = Tenant::create([
        'name' => 'Tenant 1',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_tenant1',
        'vector_namespace' => 'tenant1',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $tenant2 = Tenant::create([
        'name' => 'Tenant 2',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_tenant2',
        'vector_namespace' => 'tenant2',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // Create feeds for each tenant
    $feed1 = Feed::create([
        'tenant_id' => $tenant1->id,
        'url' => 'https://example.com/feed1.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
    ]);

    $feed2 = Feed::create([
        'tenant_id' => $tenant2->id,
        'url' => 'https://example.com/feed2.xml',
        'format' => 'csv',
        'sync_schedule' => 'weekly',
    ]);

    // Filter feeds by tenant1
    $response = $this
        ->actingAs($user)
        ->get(route('merchant.feeds.index', ['tenant_id' => $tenant1->id]));

    $response->assertStatus(200);
    $response->assertSee('https://example.com/feed1.xml');
    $response->assertDontSee('https://example.com/feed2.xml');
});

test('feed url must be valid', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // Test with invalid URL
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.store'), [
            'tenant_id' => $tenant->id,
            'url' => 'invalid-url',
            'format' => 'google_merchant',
            'sync_schedule' => 'daily',
        ]);

    $response->assertSessionHasErrors('url');

    // Test with valid URL
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.store'), [
            'tenant_id' => $tenant->id,
            'url' => 'https://example.com/feed.xml',
            'format' => 'google_merchant',
            'sync_schedule' => 'daily',
        ]);

    $response->assertSessionDoesntHaveErrors('url');
});

test('feed format must be valid', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $validFormats = ['google_merchant', 'csv', 'xml', 'json'];

    // Test with invalid format
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.store'), [
            'tenant_id' => $tenant->id,
            'url' => 'https://example.com/feed.xml',
            'format' => 'invalid-format',
            'sync_schedule' => 'daily',
        ]);

    $response->assertSessionHasErrors('format');

    // Test with each valid format
    foreach ($validFormats as $format) {
        $response = $this
            ->actingAs($user)
            ->post(route('merchant.feeds.store'), [
                'tenant_id' => $tenant->id,
                'url' => "https://example.com/feed-{$format}.xml",
                'format' => $format,
                'sync_schedule' => 'daily',
            ]);

        $response->assertSessionDoesntHaveErrors('format');
    }
});

test('feed sync schedule must be valid', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $validSchedules = ['hourly', 'daily', 'weekly', 'monthly'];

    // Test with invalid schedule
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.store'), [
            'tenant_id' => $tenant->id,
            'url' => 'https://example.com/feed.xml',
            'format' => 'google_merchant',
            'sync_schedule' => 'invalid-schedule',
        ]);

    $response->assertSessionHasErrors('sync_schedule');

    // Test with each valid schedule
    foreach ($validSchedules as $schedule) {
        $response = $this
            ->actingAs($user)
            ->post(route('merchant.feeds.store'), [
                'tenant_id' => $tenant->id,
                'url' => "https://example.com/feed-{$schedule}.xml",
                'format' => 'google_merchant',
                'sync_schedule' => $schedule,
            ]);

        $response->assertSessionDoesntHaveErrors('sync_schedule');
    }
});

test('user can trigger manual feed sync', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // Create a feed
    $feed = Feed::create([
        'tenant_id' => $tenant->id,
        'url' => 'https://example.com/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
        'last_sync_at' => Carbon::now()->subDay(),
        'next_sync_at' => Carbon::now()->addDay(),
    ]);

    // Trigger manual sync
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.sync', $feed->id));

    $response->assertRedirect();

    // Refresh feed from database
    $feed->refresh();

    // Check that last_sync_at was updated
    $this->assertNotNull($feed->last_sync_at);
    $this->assertTrue($feed->last_sync_at->isToday());

    // Check that sync_status was updated
    $this->assertNotNull($feed->sync_status);
});

test('feed cannot be created for tenant owned by another user', function () {
    $user1 = User::factory()->create();
    $user2 = User::factory()->create();

    $tenant2 = Tenant::create([
        'name' => 'User 2 Tenant',
        'user_id' => $user2->id,
        'meilisearch_index' => 'products_user2',
        'vector_namespace' => 'user2',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // User1 tries to create a feed for User2's tenant
    $response = $this
        ->actingAs($user1)
        ->post(route('merchant.feeds.store'), [
            'tenant_id' => $tenant2->id,
            'url' => 'https://example.com/feed.xml',
            'format' => 'google_merchant',
            'sync_schedule' => 'daily',
        ]);

    $response->assertStatus(403);

    $this->assertDatabaseCount('feeds', 0);
});

test('feed shows correct next sync time based on schedule', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // Define schedules and expected next sync intervals
    $schedules = [
        'hourly' => Carbon::now()->addHour(),
        'daily' => Carbon::now()->addDay(),
        'weekly' => Carbon::now()->addWeek(),
        'monthly' => Carbon::now()->addMonth(),
    ];

    foreach ($schedules as $schedule => $expectedNextSync) {
        // Create feed with this schedule
        $feed = Feed::create([
            'tenant_id' => $tenant->id,
            'url' => "https://example.com/feed-{$schedule}.xml",
            'format' => 'google_merchant',
            'sync_schedule' => $schedule,
        ]);

        // View the feed details
        $response = $this
            ->actingAs($user)
            ->get(route('merchant.feeds.show', $feed->id));

        $response->assertStatus(200);

        // Check that next_sync_at was calculated correctly
        $feed->refresh();
        $this->assertNotNull($feed->next_sync_at);

        // Allow a small margin of error (few seconds) due to processing time
        $diffInSeconds = abs($feed->next_sync_at->diffInSeconds($expectedNextSync));
        $this->assertLessThan(60, $diffInSeconds); // Within a minute
    }
});
