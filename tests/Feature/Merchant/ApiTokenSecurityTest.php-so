<?php

use App\Models\User;
use App\Models\Tenant;
use Illuminate\Foundation\Testing\RefreshDatabase;

uses(RefreshDatabase::class);

test('api token is securely generated with sufficient entropy', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test_tenant',
        'vector_namespace' => 'test_tenant',
        'api_token' => null,
        'active' => true,
    ]);

    $response = $this
        ->actingAs($user)
        ->post(route('merchant.tenants.token.generate', $tenant->id));

    $tenant->refresh();

    // Check token is not null
    $this->assertNotNull($tenant->api_token);

    // Check token length (64 characters for 32 bytes as hex)
    $this->assertEquals(64, strlen($tenant->api_token));

    // Check token is hexadecimal
    $this->assertMatchesRegularExpression('/^[a-f0-9]{64}$/i', $tenant->api_token);
});

test('regenerating api token changes the token value', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test_tenant',
        'vector_namespace' => 'test_tenant',
        'api_token' => 'original-token-value',
        'active' => true,
    ]);

    $response = $this
        ->actingAs($user)
        ->post(route('merchant.tenants.token.generate', $tenant->id));

    $tenant->refresh();

    $this->assertNotEquals('original-token-value', $tenant->api_token);
});

test('user cannot generate token for inactive tenant', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Inactive Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_inactive',
        'vector_namespace' => 'inactive',
        'api_token' => null,
        'active' => false,
    ]);

    $response = $this
        ->actingAs($user)
        ->post(route('merchant.tenants.token.generate', $tenant->id));

    $response->assertSessionHasErrors();

    $tenant->refresh();
    $this->assertNull($tenant->api_token);
});

test('user cannot revoke token for inactive tenant', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Inactive Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_inactive',
        'vector_namespace' => 'inactive',
        'api_token' => 'existing-token',
        'active' => false,
    ]);

    $response = $this
        ->actingAs($user)
        ->delete(route('merchant.tenants.token.revoke', $tenant->id));

    $response->assertSessionHasErrors();

    $tenant->refresh();
    $this->assertEquals('existing-token', $tenant->api_token);
});

test('admin user can generate token for any tenant', function () {
    // Create an admin user
    $admin = User::factory()->create([
        'email' => 'admin@example.com',
        'is_admin' => true,
    ]);

    // Create a regular user
    $user = User::factory()->create();

    // Create tenant for regular user
    $tenant = Tenant::create([
        'name' => 'User Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_user',
        'vector_namespace' => 'user',
        'api_token' => null,
        'active' => true,
    ]);

    // Admin should be able to generate token for user's tenant
    $response = $this
        ->actingAs($admin)
        ->post(route('merchant.tenants.token.generate', $tenant->id));

    $response->assertRedirect();

    $tenant->refresh();
    $this->assertNotNull($tenant->api_token);
});

test('api token is not returned in tenant listing', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test_tenant',
        'vector_namespace' => 'test_tenant',
        'api_token' => 'sensitive-token-value',
        'active' => true,
    ]);

    $response = $this
        ->actingAs($user)
        ->get(route('merchant.tenants.index'));

    $response->assertStatus(200);
    $response->assertDontSee('sensitive-token-value');
});

test('api token is visible on tenant detail page', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test_tenant',
        'vector_namespace' => 'test_tenant',
        'api_token' => 'visible-token-value',
        'active' => true,
    ]);

    $response = $this
        ->actingAs($user)
        ->get(route('merchant.tenants.show', $tenant->id));

    $response->assertStatus(200);
    $response->assertSee('visible-token-value');
});
