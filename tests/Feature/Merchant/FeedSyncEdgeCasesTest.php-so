<?php

use App\Models\User;
use App\Models\Tenant;
use App\Models\Feed;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;

uses(RefreshDatabase::class);

test('feed sync updates last_sync_at timestamp', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $oldTime = Carbon::now()->subHours(5);

    $feed = Feed::create([
        'tenant_id' => $tenant->id,
        'url' => 'https://example.com/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
        'last_sync_at' => $oldTime,
        'next_sync_at' => Carbon::now()->addDay(),
    ]);

    // Trigger sync
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.sync', $feed->id));

    $feed->refresh();

    // Check that last_sync_at was updated
    $this->assertTrue($feed->last_sync_at > $oldTime);
});

test('feed sync updates next_sync_at based on schedule', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $schedules = [
        'hourly' => 1, // hours
        'daily' => 24, // hours
        'weekly' => 168, // hours (7*24)
        'monthly' => 30, // days
    ];

    foreach ($schedules as $schedule => $expectedHours) {
        $feed = Feed::create([
            'tenant_id' => $tenant->id,
            'url' => "https://example.com/feed-{$schedule}.xml",
            'format' => 'google_merchant',
            'sync_schedule' => $schedule,
        ]);

        // Trigger sync
        $this->actingAs($user)->post(route('merchant.feeds.sync', $feed->id));

        $feed->refresh();

        if ($schedule !== 'monthly') {
            // For hourly, daily and weekly schedules
            $this->assertEqualsWithDelta(
                Carbon::now()->addHours($expectedHours)->timestamp,
                $feed->next_sync_at->timestamp,
                60 // Allow 60 seconds of difference
            );
        } else {
            // For monthly schedule
            $this->assertEqualsWithDelta(
                Carbon::now()->addDays($expectedHours)->timestamp,
                $feed->next_sync_at->timestamp,
                60 // Allow 60 seconds of difference
            );
        }
    }
});

test('feed sync handles errors correctly', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    // Create a feed with an invalid URL that will cause a sync error
    $feed = Feed::create([
        'tenant_id' => $tenant->id,
        'url' => 'https://invalid-url-that-will-fail.xyz/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
    ]);

    // Mock the feed controller to simulate an error during sync
    $this->mock(\App\Http\Controllers\Merchant\FeedController::class, function ($mock) {
        $mock->shouldReceive('syncFeed')
            ->andReturn([
                'success' => false,
                'error' => 'Unable to fetch feed: Connection failed'
            ]);
    });

    // Trigger sync
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.sync', $feed->id));

    $feed->refresh();

    // Check that error was recorded in sync_status
    $this->assertFalse(json_decode($feed->sync_status)->success);
    $this->assertStringContainsString('Connection failed', json_decode($feed->sync_status)->error);
});

test('inactive feeds cannot be synced', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Test Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_test',
        'vector_namespace' => 'test',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $feed = Feed::create([
        'tenant_id' => $tenant->id,
        'url' => 'https://example.com/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
        'active' => false,
    ]);

    // Trigger sync
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.sync', $feed->id));

    $response->assertSessionHasErrors();
});

test('feed sync is blocked if tenant is inactive', function () {
    $user = User::factory()->create();
    $tenant = Tenant::create([
        'name' => 'Inactive Tenant',
        'user_id' => $user->id,
        'meilisearch_index' => 'products_inactive',
        'vector_namespace' => 'inactive',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => false,
    ]);

    $feed = Feed::create([
        'tenant_id' => $tenant->id,
        'url' => 'https://example.com/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
        'active' => true,
    ]);

    // Trigger sync
    $response = $this
        ->actingAs($user)
        ->post(route('merchant.feeds.sync', $feed->id));

    $response->assertSessionHasErrors();
});

test('user cannot sync feed belonging to another user', function () {
    $user1 = User::factory()->create();
    $user2 = User::factory()->create();

    $tenant2 = Tenant::create([
        'name' => 'User 2 Tenant',
        'user_id' => $user2->id,
        'meilisearch_index' => 'products_user2',
        'vector_namespace' => 'user2',
        'api_token' => bin2hex(random_bytes(32)),
        'active' => true,
    ]);

    $feed = Feed::create([
        'tenant_id' => $tenant2->id,
        'url' => 'https://example.com/feed.xml',
        'format' => 'google_merchant',
        'sync_schedule' => 'daily',
    ]);

    // User1 tries to sync User2's feed
    $response = $this
        ->actingAs($user1)
        ->post(route('merchant.feeds.sync', $feed->id));

    $response->assertStatus(403);
});
